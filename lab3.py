# -*- coding: utf-8 -*-
"""lab3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nBgF9dcTmPDXEPFqni-5mvNqro-1P8hW
"""

pakistani_cities = {

                    'Mansehra': ['Abbottabad','Peshawar'],
                    'Abbottabad': ['Mansehra','Islamabad'],
                    'Hyderabad': ['Karachi'],
                    'Karachi': ['Hyderabad'],
                    'Lahore': ['Islamabad',],
                    'Islamabad': ['Lahore','Abbottabad'],
                    'Peshawar': ['Quetta','Mansehra'],
                    'Quetta': ['Peshawar']
                   }

from collections import deque

def bfs_shortpath(graph, start, goal):

   queue = deque ([[start]])

   #keeping track off visited nodes we will create variable visited that will store values of visited nodes
   visited = set()

   #queue has number of nodes to makes sure all nodes are visited and stored iteratively a looop will be used here we are using while loop

   while queue:
      #remove first path from queue
      path = queue.popleft()
      current_city = path[-1]

      #if current city has not been visited yet
      if current_city not in visited:
         visited.add(current_city)  #mark it as visited

         #if goal is reached return this path immediately
         if current_city == goal:
            return path

         for city in graph[current_city]:
            new_path = list(path)     #loop is written to visit all neighboring nodes
            new_path.append(city)
            queue.append(new_path)
             #if every node is visited and goal is not reached
   return None

#Depth First Search
def dfs_shortpath(graph, start, goal, path=None, visited=None):

    # Initialize path and visited on the first call
    "path starts as an empty list to record the route you take."
    if path is None:
        path = []
        "visited starts as an empty set to remember visited places so you don't repeat them."
    if visited is None:
        visited = set()

    # Add current city to the path and mark as visited
    #Record the starting point in your route.
    path.append(start)
    #Mark it as visited to avoid cycles.
    visited.add(start)

    # If goal is reached, return the path
    if start == goal:
        return path

    # Explore each neighbor recursively
    #Gets all neighbors of the current node. Returns [] if no neighbors exist.
    for neighbor in graph.get(start, []):
        if neighbor not in visited:
# Make recursive DFS call
# graph The entire map of nodes and connections.
#neighbor       The next node to explore.
#goal   The final target node to reach.
#path.copy()    Safe copy of the current route.
#visited.copy() Safe copy of visited nodes to prevent loops.
#result = dfs_path(...) Go deeper into the graph and store the result.

            result = dfs_shortpath(graph, neighbor, goal, path.copy(), visited.copy())

             # If a path is found, return it immediately
            if result:
                return result

    # If no path found from this city, return None
    return None

# -------------------------------------------
# Step 4: Testing the functions
# -------------------------------------------
start_city = "Karachi"
goal_city = "Peshawar"


# BFS for the shortest path
bfs_result = bfs_shortpath(pakistani_cities, start_city, goal_city)
print("BFS Shortest Path from Karachi to Peshawar:", bfs_result)
# DFS for any path
dfs_result = dfs_shortpath(pakistani_cities, start_city, goal_city)
print("DFS Path from Karachi to Peshawar:", dfs_result)